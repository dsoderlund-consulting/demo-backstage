# Dependencies
load('ext://git_resource', 'git_checkout')
load('ext://deployment', 'deployment_create')
load('ext://configmap', 'configmap_create')
# Deploy ds-ref-platform
if not os.path.exists('../ds-ref-platform'):
  fail('Please "git clone" ds-ref-platform repo to ../ds-ref-platform and follow the instructions in the README.md!')
include('../ds-ref-platform/2_platform/Tiltfile')

# Database
k8s_yaml('kubernetes/postgres-cluster.yaml')
k8s_resource(
  resource_deps=['cnpg-controller-manager'], # created by ds-ref-platform
  new_name='database',
  objects=['${{ values.component }}-postgres-cluster'],
  extra_pod_selectors=[{'cnpg.io/cluster': '${{ values.component }}-postgres-cluster'}],
  labels='app',
  port_forwards=5432)

# Backend
docker_build("backend", "backend")
deployment_create(
  'backend',
  resource_deps=['database'],
  ports='8080',
  env=[{"name":"ASPNETCORE_ENVIRONMENT", "value": "Development"}],
  envFrom=[{
    "secretRef":{
      "name": "${{ values.component }}-postgres-cluster-app" # autogenerated when creating a postgres cluster without any initdb arguments
    }
  }]
)

# Frontend
docker_build(
  "frontend",
  "frontend",
  dockerfile="frontend/tilt.dockerfile", # we want another docker file when running in dev in kubernetes, since the default one is just compiling for nginx.
  live_update=[
    sync('frontend', '/app'),
    run('cd /app && npm install', trigger=['frontend/package.json']),
  ]
)


deployment_create(
  'frontend',
  resource_deps=['backend'],
  ports='8081',
)

# ingress / istio virtual service
k8s_yaml('kubernetes/virtualservice.yaml')

k8s_resource(
  workload='frontend',
  labels='app'
)
k8s_resource(
  workload='backend',
  labels='app'
)