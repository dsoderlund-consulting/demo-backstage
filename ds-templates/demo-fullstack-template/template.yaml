apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: demo-fullstack-template
  title: Demo Fullstack Template
  description: An demonstration of creating fullstack applications - developed and deployed on kubernetes.
spec:
  owner: group:dsoderlund.consulting
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        ingress:
          title: Ingress
          type: boolean
          description: Should the services have ingress?
          ui:autofocus: false
        database:
          title: One Database please!
          type: boolean
          description: would you like a postgres database with your order?

    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOrganizations:
              - dsoderlund-consulting
            

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        targetPath: ./app
        values:
          name: ${{ parameters.name }}
          ingress: ${{ parameters.ingress }}
          database: ${{ parameters.database }}
    - id: fetch-gitops
      name: Fetch gitops
      action: fetch:template
      input:
        url: ./gitops
        targetPath: ./gitops
        values:
          name: ${{ parameters.name }}
          ingress: ${{ parameters.ingress }}
          database: ${{ parameters.database }}
    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish new repo
      action: publish:github
      input:
        sourcePath: ./app
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        gitAuthorName: ${{ user.entity.metadata.name }}
        gitAuthorEmail: ${{ user.entity.spec.profile.email }}
    

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
