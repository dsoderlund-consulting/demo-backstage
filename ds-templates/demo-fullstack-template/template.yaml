apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: demo-fullstack-template
  title: Demo Fullstack Template
  description: An demonstration of creating fullstack applications - developed and deployed on kubernetes.
spec:
  owner: group:dsoderlund.consulting
  type: service
  parameters:
    - title: Basic facts about the new fullstack app
      required:
        - component
      properties:
        component:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        ingress:
          title: Include Ingress
          type: boolean
          description: Should the services have ingress?
        database:
          title: Include Database
          type: boolean
          description: would you like a postgres database with your order?
        frontend:
          title: frontend
          type: string
          default: svelte
          enum:
            - svelte
            - vite
            - angular
            - blazor
            - django
          enumNames:
            - 'Svelte'
            - 'React + Vite'
            - 'Angular'
            - 'Blazor'
            - 'Django'
        backend:
          title: backend
          type: string
          default: nodejs
          enum:
            - nodejs
            - rust
            - golang
            - dotnet
            - flask
            - pode
          enumNames:
            - 'NodeJs (typescript)'
            - 'Rust'
            - 'Golang'
            - 'Dotnet 8 MVC (c#)'
            - 'Flask (python)'
            - 'Pode (pwsh)'

    - title: Choose a location for the new repo
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOrganizations:
              - dsoderlund-consulting
            allowedOwners:
              - dsoderlund-consulting

    - title: Gitops Repo configuration
      required:
        - repoName
        - repoConfiguration
        - imageRepository
      properties:
        repoName:
          title: Gitops Repo Name
          type: string
          description: Which git repository to use for gitops
          ui:autofocus: true
        repoConfiguration:
          title: Gitops Repo Configuration
          type: string
          description: Which auth configuration to use to push commits to the gitops repo
          default: nas
          enum:
            - nas
            - github
          enumNames:
            - 'nas.office.dsoderlund.consulting'
            - 'github.com:dsoderlund-consulting'
        imageRepository:
          title: Image Repository
          type: string
          description: Container Image Repository
          default: images.mgmt.dsoderlund.consulting
          enum:
            - images.mgmt.dsoderlund.consulting
            - docker.io/dsoderlund-consulting
          enumNames:
            - 'Registry inside Management and demo cluster'
            - 'Docker Hub'
    
    - title: Metadata
      required:
        - cluster
        - project
        - system
        - namespace
        - team
      properties:
        system:
          title: System
          type: string
          description: Which system the component belongs to
          default: none
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: system

        team:
          title: Team
          type: string
          description: Owner of the new component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              - kind: Group

        cluster:
          title: CI/CD Cluster
          type: string
          description: Kubernetes Cluster for CI/CD
          default: mgmt
          enum:
            - mgmt
            - dev
            - prod
          enumNames:
            - 'Management and demo cluster'
            - 'Development cluster'
            - 'Production cluster'

        project:
          title: Argo Project
          type: string
          description: Which project the component belongs to in gitops
          default: default
          enum:
            - default
            - demo

        namespace:
          title: Cluster Namespace
          type: string
          description: Which namespace the component belongs to in the cluster
          default: demo
          enum:
            - demo
            - platform
            - dev
        
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        targetPath: ./app
        values:
          component: ${{ parameters.component }}
          ingress: ${{ parameters.ingress }}
          database: ${{ parameters.database }}
          team: dsoderlund.consulting
          imageRepository: ${{ parameters.imageRepository }}
          system: demo-system

    
    - id: gitops-clone
      name: Clone Gitops Repo
      action: git:clone
      input:
        repoName: ${{ parameters.repoName }}
        repoConfiguration: ${{ parameters.repoConfiguration }}
        targetPath: ./argocd
        depth: 0
    
    - id: fetch-gitops
      name: Fetch gitops repo
      action: fetch:template
      input:
        url: ./argocd
        targetPath: ./argocd
        values:
          cluster: ${{ parameters.cluster }}
          project: ${{ parameters.project }}
          system: demo-system
          namespace: ${{ parameters.namespace }}
          team: dsoderlund.consulting
          component: ${{ parameters.component }}
          imageRepository: ${{ parameters.imageRepository }}
    
    - id: gitops-commit-push
      name: Commit and Push to Gitops Repo
      action: git:commit-push
      input:
        repoPath: ./argocd
        repoConfiguration: ${{ parameters.repoConfiguration }}
        commitMessage: "Created component ${{ parameters.name }} in cluster ${{ parameters.cluster}}"
        signCommit: true
        authorName: ${{ user.entity.metadata.name }}       # todo: gitAuthorName - and commiter should be "backstage"
        authorEmail: ${{ user.entity.spec.profile.email }} # todo: gitAuthorEmail
    
    - id: publish
      name: Publish new repo
      action: publish:github
      input:
        sourcePath: ./app
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
        gitAuthorName: ${{ user.entity.metadata.name }}
        gitAuthorEmail: ${{ user.entity.spec.profile.email }}
        repoVisibility: public

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
